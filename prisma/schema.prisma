// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  ownedProjects  Project[]
  tasks          Task[]
  profile        Profile?
  timeRecords    TimeRecord[]
  note           Note?
  projectMembers ProjectMembers[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//

model Profile {
  id      String @id @default(cuid())
  name    String
  surname String
  email   String
  team    Team

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @unique
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  DONE
}

enum ProjectType {
  PERSONAL
  COMPANY
}

model ProjectMembers {
  id        String  @id @default(cuid())
  project   Project @relation(fields: [projectId], references: [id])
  member    User    @relation(fields: [memberId], references: [id])
  projectId String
  memberId  String

  @@unique([projectId, memberId])
}

model Project {
  id          String         @id @default(cuid())
  name        String
  description String         @db.Text
  notes       String         @db.Text
  deadline    DateTime
  status      ProgressStatus
  type        ProjectType

  owner      User             @relation(fields: [ownerId], references: [id])
  ownerId    String
  tasks      Task[]
  timeRecord TimeRecord[]
  members    ProjectMembers[]
  InviteLink InviteLink[]
}

enum Team {
  NONE
  BACKEND
  DESIGN
  FRONTEND
  MANAGEMENT
  ALL
}

model Task {
  id          String         @id @default(cuid())
  name        String
  description String         @db.Text
  notes       String         @db.Text
  deadline    DateTime
  status      ProgressStatus
  team        Team

  project      Project      @relation(fields: [projectId], references: [id])
  projectId    String
  assignedTo   User         @relation(fields: [assignedToId], references: [id])
  assignedToId String
  TimeRecord   TimeRecord[]
}

model TimeRecord {
  id        String   @id @default(cuid())
  from      DateTime
  to        DateTime
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
}

model Note {
  id      String @id @default(cuid())
  text    String @db.Text
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @unique
}

model InviteLink {
  id        String  @id @default(cuid())
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}
